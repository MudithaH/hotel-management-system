# ====================================================================
# Docker Compose Configuration
# Hotel Management System
# ====================================================================
# This docker-compose file orchestrates the frontend and backend
# containers while connecting to a locally running MySQL database
# ====================================================================

services:
  # ====================================================================
  # Backend Service (Express.js API)
  # ====================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hotel-backend
    restart: unless-stopped
    
    ports:
      - "5000:5000"
    
    environment:
      # Database Configuration
      # Use host.docker.internal to connect to localhost from container
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: 7d
      
      # Server Configuration
      PORT: 5000
      NODE_ENV: production
      
      # CORS Configuration
      FRONTEND_URL: http://localhost:3000
    
    # Use host network mode on Linux, or extra_hosts on Windows/Mac
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    networks:
      - hotel-network
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ====================================================================
  # Frontend Service (React/Vite with Nginx)
  # ====================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hotel-frontend
    restart: unless-stopped
    
    ports:
      - "3000:80"
    
    depends_on:
      backend:
        condition: service_healthy
    
    networks:
      - hotel-network
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ====================================================================
# Networks
# ====================================================================
networks:
  hotel-network:
    driver: bridge
    name: hotel-management-network

# ====================================================================
# Volumes (optional - for future use)
# ====================================================================
# volumes:
#   backend-logs:
#   frontend-logs:
